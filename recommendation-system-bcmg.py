import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import kagglehub
import time

# ============================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ============================================

st.set_page_config(
    page_title="E-Commerce Data Analysis & Recommender",
    page_icon="üõí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# ESTILOS PERSONALIZADOS
# ============================================

def add_custom_css():
    st.markdown("""
    <style>
    /* Header fixo com gradiente */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .main-header h1 {
        color: white;
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
    }
    
    .main-header p {
        color: rgba(255,255,255,0.9);
        margin: 0.5rem 0 0 0;
        font-size: 1.1rem;
    }
    
    /* Cards de m√©tricas */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        margin: 0.5rem 0;
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }
    
    /* Tabs customizadas */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: #f0f2f6;
        border-radius: 8px 8px 0 0;
        padding: 10px 20px;
        font-weight: 600;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }
    
    /* Footer */
    .footer {
        margin-top: 3rem;
        padding: 2rem;
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    
    .footer a {
        color: #ffe066;
        text-decoration: none;
        font-weight: bold;
    }
    
    .footer a:hover {
        text-decoration: underline;
    }
    
    /* Alertas customizados */
    .custom-info {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
    }
    
    .custom-success {
        background-color: #e8f5e9;
        border-left: 4px solid #4caf50;
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
    }
    
    .custom-warning {
        background-color: #fff3e0;
        border-left: 4px solid #ff9800;
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

add_custom_css()

# ============================================
# FUN√á√ïES DE CARREGAMENTO DE DADOS
# ============================================

@st.cache_data(ttl=3600, show_spinner=False)
def load_data(max_retries=3):
    """Carrega dados do Kaggle com retry autom√°tico"""
    dataset = "olistbr/brazilian-ecommerce"
    
    data_files = {
        "geolocation": "olist_geolocation_dataset.csv",
        "customers": "olist_customers_dataset.csv",
        "translation": "product_category_name_translation.csv",
        "sellers": "olist_sellers_dataset.csv",
        "products": "olist_products_dataset.csv",
        "orders": "olist_orders_dataset.csv",
        "reviews": "olist_order_reviews_dataset.csv",
        "payments": "olist_order_payments_dataset.csv",
        "order_items": "olist_order_items_dataset.csv"
    }
    
    for tentativa in range(max_retries):
        try:
            data = {}
            dataset_path = kagglehub.dataset_download(dataset)
            
            for key, filename in data_files.items():
                file_path = f"{dataset_path}/{filename}"
                df = pd.read_csv(file_path, low_memory=False)
                
                # Converte colunas object para string
                for col in df.select_dtypes(include=["object"]).columns:
                    df[col] = df[col].astype(str)
                
                data[key] = df
            
            return data, None
            
        except Exception as e:
            if tentativa < max_retries - 1:
                time.sleep(2 ** tentativa)
                continue
            return None, str(e)
    
    return None, "Falha ap√≥s m√∫ltiplas tentativas"

def safe_show_df(df, caption=None, height=400):
    """Exibe DataFrame com tratamento para compatibilidade Arrow"""
    df_fixed = df.copy()
    for col in df_fixed.columns:
        if df_fixed[col].dtype == "object":
            df_fixed[col] = df_fixed[col].astype(str)
    st.dataframe(df_fixed, use_container_width=True, height=height)
    if caption:
        st.caption(caption)

# ============================================
# HEADER
# ============================================

st.markdown("""
<div class="main-header">
    <h1>üõí E-Commerce Data Analysis & Recommender</h1>
    <p>An√°lise completa de dados de e-commerce brasileiro com sistema de recomenda√ß√£o inteligente</p>
</div>
""", unsafe_allow_html=True)

# ============================================
# SIDEBAR
# ============================================

with st.sidebar:
    st.image("https://img.icons8.com/color/96/000000/shopping-cart.png", width=80)
    st.title("üéØ Navega√ß√£o")
    
    opcoes = [
        "üìä Vis√£o Geral",
        "üîç An√°lise Explorat√≥ria", 
        "üîó An√°lise Relacional", 
        "ü§ñ Sistema de Recomenda√ß√£o",
        "üìö Documenta√ß√£o"
    ]
    
    escolha = st.radio("Escolha uma se√ß√£o", opcoes, label_visibility="collapsed")
    
    st.markdown("---")
    
    st.markdown("""
    <div style='padding: 1rem; background-color: #f0f2f6; border-radius: 8px;'>
        <h4 style='margin: 0 0 0.5rem 0;'>üí° Dica</h4>
        <p style='margin: 0; font-size: 0.9rem;'>
        Use as abas para navegar entre diferentes an√°lises e visualiza√ß√µes.
        </p>
    </div>
    """, unsafe_allow_html=True)

# ============================================
# CARREGAMENTO DE DADOS
# ============================================

with st.spinner("üîÑ Carregando dados do Kaggle..."):
    data, error = load_data()

if error or data is None:
    st.error(f"‚ùå Erro ao carregar dados: {error}")
    st.info("""
    **Poss√≠veis solu√ß√µes:**
    - Verifique sua conex√£o com a internet
    - Certifique-se de que tem acesso ao Kaggle
    - Tente recarregar a p√°gina (F5)
    """)
    st.stop()

st.success(f"‚úÖ Dados carregados com sucesso!")

# ============================================
# SE√á√ÉO: VIS√ÉO GERAL
# ============================================

if escolha == "üìä Vis√£o Geral":
    st.header("üìä Vis√£o Geral do Dataset")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-label">Total de Pedidos</div>
            <div class="metric-value">{len(data['orders']):,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-label">Clientes √önicos</div>
            <div class="metric-value">{data['customers']['customer_unique_id'].nunique():,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-label">Produtos</div>
            <div class="metric-value">{len(data['products']):,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-label">Vendedores</div>
            <div class="metric-value">{len(data['sellers']):,}</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Informa√ß√µes dos datasets
    st.subheader("üìÅ Informa√ß√µes dos Datasets")
    
    dataset_info = []
    for nome, df in data.items():
        dataset_info.append({
            "Dataset": nome.title(),
            "Registros": f"{len(df):,}",
            "Colunas": len(df.columns),
            "Mem√≥ria (MB)": f"{df.memory_usage(deep=True).sum() / 1024**2:.2f}"
        })
    
    info_df = pd.DataFrame(dataset_info)
    st.dataframe(info_df, use_container_width=True, hide_index=True)
    
    # Distribui√ß√£o temporal de pedidos
    st.subheader("üìà Distribui√ß√£o Temporal de Pedidos")
    
    orders_temp = data['orders'].copy()
    orders_temp['order_purchase_timestamp'] = pd.to_datetime(orders_temp['order_purchase_timestamp'])
    orders_temp['year_month'] = orders_temp['order_purchase_timestamp'].dt.to_period('M').astype(str)
    
    orders_by_month = orders_temp.groupby('year_month').size().reset_index(name='count')
    
    fig = px.line(
        orders_by_month, 
        x='year_month', 
        y='count',
        title='Evolu√ß√£o de Pedidos ao Longo do Tempo',
        labels={'year_month': 'M√™s', 'count': 'N√∫mero de Pedidos'}
    )
    fig.update_traces(line_color='#667eea', line_width=3)
    fig.update_layout(
        hovermode='x unified',
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)'
    )
    st.plotly_chart(fig, use_container_width=True)

# ============================================
# SE√á√ÉO: AN√ÅLISE EXPLORAT√ìRIA
# ============================================

elif escolha == "üîç An√°lise Explorat√≥ria":
    st.header("üîç An√°lise Explorat√≥ria dos Dados")
    
    tab_names = list(data.keys())
    tab_selecionada = st.selectbox("üìÇ Escolha o dataset para an√°lise", tab_names)
    df = data[tab_selecionada]
    
    st.subheader(f"Dataset: {tab_selecionada.title()}")
    
    # Criar tabs para diferentes visualiza√ß√µes
    tab1, tab2, tab3 = st.tabs(["üìã Dados", "üìä Estat√≠sticas", "üìà Visualiza√ß√µes"])
    
    with tab1:
        st.markdown("##### Pr√©-visualiza√ß√£o dos Dados")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            num_rows = st.slider("N√∫mero de linhas", 5, 100, 10)
        with col2:
            show_all = st.checkbox("Mostrar tudo", value=False)
        
        if show_all:
            safe_show_df(df, height=600)
        else:
            safe_show_df(df.head(num_rows), height=400)
        
        st.markdown("##### Informa√ß√µes do Dataset")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de Registros", f"{len(df):,}")
        with col2:
            st.metric("Total de Colunas", len(df.columns))
        with col3:
            st.metric("Valores Nulos", f"{df.isnull().sum().sum():,}")
    
    with tab2:
        st.markdown("##### Resumo Estat√≠stico")
        safe_show_df(df.describe(include='all'), height=400)
        
        st.markdown("##### An√°lise de Valores Nulos")
        null_counts = df.isnull().sum()
        null_df = pd.DataFrame({
            'Coluna': null_counts.index,
            'Valores Nulos': null_counts.values,
            'Percentual (%)': (null_counts.values / len(df) * 100).round(2)
        })
        null_df = null_df[null_df['Valores Nulos'] > 0].sort_values('Valores Nulos', ascending=False)
        
        if len(null_df) > 0:
            fig = px.bar(
                null_df, 
                x='Coluna', 
                y='Valores Nulos',
                title='Distribui√ß√£o de Valores Nulos',
                color='Percentual (%)',
                color_continuous_scale='Reds'
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.success("‚úÖ Nenhum valor nulo encontrado!")
    
    with tab3:
        st.markdown("##### Visualiza√ß√µes")
        
        num_cols = df.select_dtypes(include=['number']).columns.tolist()
        cat_cols = df.select_dtypes(include=['object']).columns.tolist()
        
        if num_cols:
            st.markdown("**An√°lise de Colunas Num√©ricas**")
            col_num = st.selectbox("Escolha uma coluna num√©rica", num_cols)
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig = px.histogram(
                    df, 
                    x=col_num,
                    title=f'Distribui√ß√£o de {col_num}',
                    nbins=50
                )
                fig.update_traces(marker_color='#667eea')
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.box(
                    df, 
                    y=col_num,
                    title=f'Box Plot de {col_num}'
                )
                fig.update_traces(marker_color='#764ba2')
                st.plotly_chart(fig, use_container_width=True)
        
        if cat_cols:
            st.markdown("**An√°lise de Colunas Categ√≥ricas**")
            col_cat = st.selectbox("Escolha uma coluna categ√≥rica", cat_cols)
            
            top_n = st.slider("Top N categorias", 5, 20, 10)
            value_counts = df[col_cat].value_counts().head(top_n)
            
            fig = px.bar(
                x=value_counts.index,
                y=value_counts.values,
                title=f'Top {top_n} - {col_cat}',
                labels={'x': col_cat, 'y': 'Frequ√™ncia'}
            )
            fig.update_traces(marker_color='#667eea')
            st.plotly_chart(fig, use_container_width=True)

# ============================================
# SE√á√ÉO: AN√ÅLISE RELACIONAL
# ============================================

elif escolha == "üîó An√°lise Relacional":
    st.header("üîó An√°lise Relacional entre Datasets")
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üó∫Ô∏è An√°lise Geogr√°fica", 
        "üì¶ An√°lise de Produtos",
        "üí≥ An√°lise de Pagamentos",
        "‚≠ê An√°lise de Avalia√ß√µes"
    ])
    
    with tab1:
        st.subheader("Distribui√ß√£o de Pedidos por Estado")
        
        customers = data['customers']
        orders = data['orders']
        
        df_merged = orders.merge(customers, on='customer_id')
        state_counts = df_merged['customer_state'].value_counts().reset_index()
        state_counts.columns = ['Estado', 'N√∫mero de Pedidos']
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            fig = px.choropleth(
                state_counts,
                locations='Estado',
                locationmode='USA-states',
                color='N√∫mero de Pedidos',
                scope='south america',
                title='Mapa de Calor - Pedidos por Estado',
                color_continuous_scale='Viridis'
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("##### Top 10 Estados")
            safe_show_df(state_counts.head(10), height=400)
    
    with tab2:
        st.subheader("An√°lise de Categorias de Produtos")
        
        order_items = data['order_items']
        products = data['products']
        translation = data['translation']
        
        df_prod = order_items.merge(
            products[['product_id', 'product_category_name']], 
            on='product_id'
        )
        
        # Traduzir categorias
        df_prod = df_prod.merge(
            translation, 
            on='product_category_name', 
            how='left'
        )
        
        df_prod['category_display'] = df_prod['product_category_name_english'].fillna(
            df_prod['product_category_name']
        )
        
        cat_counts = df_prod['category_display'].value_counts().reset_index().head(15)
        cat_counts.columns = ['Categoria', 'Vendas']
        
        fig = px.bar(
            cat_counts, 
            x='Vendas', 
            y='Categoria',
            orientation='h',
            title='Top 15 Categorias Mais Vendidas',
            color='Vendas',
            color_continuous_scale='Blues'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # An√°lise de pre√ßos por categoria
        st.markdown("##### An√°lise de Pre√ßos por Categoria (Top 10)")
        
        price_analysis = df_prod.groupby('category_display')['price'].agg([
            ('M√©dia', 'mean'),
            ('Mediana', 'median'),
            ('M√≠nimo', 'min'),
            ('M√°ximo', 'max')
        ]).reset_index()
        price_analysis = price_analysis.nlargest(10, 'M√©dia')
        
        fig = px.box(
            df_prod[df_prod['category_display'].isin(price_analysis['category_display'])],
            x='category_display',
            y='price',
            title='Distribui√ß√£o de Pre√ßos por Categoria',
            labels={'category_display': 'Categoria', 'price': 'Pre√ßo (R$)'}
        )
        fig.update_xaxis(tickangle=45)
        st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        st.subheader("An√°lise de M√©todos de Pagamento")
        
        payments = data['payments']
        
        col1, col2 = st.columns(2)
        
        with col1:
            payment_type = payments['payment_type'].value_counts().reset_index()
            payment_type.columns = ['M√©todo', 'Quantidade']
            
            fig = px.pie(
                payment_type,
                values='Quantidade',
                names='M√©todo',
                title='Distribui√ß√£o de M√©todos de Pagamento',
                hole=0.4
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            payment_summary = payments.groupby('payment_type').agg({
                'payment_value': ['sum', 'mean', 'count']
            }).reset_index()
            payment_summary.columns = ['M√©todo', 'Valor Total', 'Valor M√©dio', 'Transa√ß√µes']
            
            st.markdown("##### Resumo por M√©todo")
            safe_show_df(payment_summary, height=300)
        
        # An√°lise de parcelas
        st.markdown("##### An√°lise de Parcelas")
        installments = payments[payments['payment_installments'] > 0]['payment_installments'].value_counts().head(10).reset_index()
        installments.columns = ['Parcelas', 'Frequ√™ncia']
        
        fig = px.bar(
            installments,
            x='Parcelas',
            y='Frequ√™ncia',
            title='Distribui√ß√£o de N√∫mero de Parcelas',
            color='Frequ√™ncia',
            color_continuous_scale='Greens'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with tab4:
        st.subheader("An√°lise de Avalia√ß√µes")
        
        reviews = data['reviews']
        
        col1, col2 = st.columns(2)
        
        with col1:
            score_dist = reviews['review_score'].value_counts().sort_index().reset_index()
            score_dist.columns = ['Nota', 'Quantidade']
            
            fig = px.bar(
                score_dist,
                x='Nota',
                y='Quantidade',
                title='Distribui√ß√£o de Notas de Avalia√ß√£o',
                color='Nota',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            avg_score = reviews['review_score'].mean()
            total_reviews = len(reviews)
            
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">Nota M√©dia</div>
                <div class="metric-value">{avg_score:.2f} ‚≠ê</div>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">Total de Avalia√ß√µes</div>
                <div class="metric-value">{total_reviews:,}</div>
            </div>
            """, unsafe_allow_html=True)

# ============================================
# SE√á√ÉO: SISTEMA DE RECOMENDA√á√ÉO
# ============================================

elif escolha == "ü§ñ Sistema de Recomenda√ß√£o":
    st.header("ü§ñ Sistema de Recomenda√ß√£o de Produtos")
    
    # Preparar dados para ML
    @st.cache_data
    def prepare_ml_data(data_dict):
        customers = data_dict['customers']
        orders = data_dict['orders']
        order_items = data_dict['order_items']
        products = data_dict['products']
        
        df = orders.merge(order_items, on='order_id').merge(
            products[['product_id', 'product_category_name']], 
            on='product_id'
        )
        df = df.merge(customers[['customer_id', 'customer_unique_id']], on='customer_id')
        
        df['category_code'] = df['product_category_name'].astype('category').cat.codes
        df['customer_code'] = df['customer_unique_id'].astype('category').cat.codes
        
        X = df[['customer_code']]
        y = df['category_code']
        
        return X, y, df
    
    with st.spinner("üîÑ Preparando dados para treinamento..."):
        X, y, df_ml = prepare_ml_data(data)
    
    st.success("‚úÖ Dados preparados!")
    
    # Configura√ß√µes do modelo
    st.subheader("‚öôÔ∏è Configura√ß√µes do Modelo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        test_size = st.slider("Tamanho do conjunto de teste (%)", 10, 40, 20) / 100
        n_estimators_rf = st.slider("Random Forest - N¬∫ de √°rvores", 50, 200, 100, step=50)
    
    with col2:
        random_state = st.number_input("Random State", 0, 100, 42)
        n_estimators_xgb = st.slider("XGBoost - N¬∫ de estimadores", 50, 200, 100, step=50)
    
    if st.button("üöÄ Treinar Modelos", type="primary", use_container_width=True):
        with st.spinner("üîÑ Treinando modelos..."):
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=test_size, random_state=random_state
            )
            
            # Random Forest
            progress_bar = st.progress(0)
            st.info("üå≤ Treinando Random Forest...")
            
            rf = RandomForestClassifier(n_estimators=n_estimators_rf, random_state=random_state, n_jobs=-1)
            rf.fit(X_train, y_train)
            rf_pred = rf.predict(X_test)
            progress_bar.progress(50)
            
            # XGBoost
            st.info("üöÄ Treinando XGBoost...")
            xgb = XGBClassifier(
                n_estimators=n_estimators_xgb, 
                use_label_encoder=False, 
                eval_metric='mlogloss',
                random_state=random_state
            )
            xgb.fit(X_train, y_train)
            xgb_pred = xgb.predict(X_test)
            progress_bar.progress(100)
            
            # M√©tricas
            rf_metrics = {
                'accuracy': accuracy_score(y_test, rf_pred),
                'precision': precision_score(y_test, rf_pred, average='weighted', zero_division=0),
                'recall': recall_score(y_test, rf_pred, average='weighted', zero_division=0),
                'f1': f1_score(y_test, rf_pred, average='weighted', zero_division=0)
            }
            
            xgb_metrics = {
                'accuracy': accuracy_score(y_test, xgb_pred),
                'precision': precision_score(y_test, xgb_pred, average='weighted', zero_division=0),
                'recall': recall_score(y_test, xgb_pred, average='weighted', zero_division=0),
                'f1': f1_score(y_test, xgb_pred, average='weighted', zero_division=0)
            }
            
            # Armazenar no session_state
            st.session_state['models_trained'] = True
            st.session_state['rf_model'] = rf
            st.session_state['xgb_model'] = xgb
            st.session_state['rf_metrics'] = rf_metrics
            st.session_state['xgb_metrics'] = xgb_metrics
            st.session_state['df_ml'] = df_ml
            st.session_state['y_test'] = y_test
            st.session_state['rf_pred'] = rf_pred
            st.session_state['xgb_pred'] = xgb_pred
        
        st.success("‚úÖ Modelos treinados com sucesso!")
        st.rerun()
    
    # Exibir resultados se modelos foram treinados
    if st.session_state.get('models_trained', False):
        st.markdown("---")
        st.subheader("üìä Resultados dos Modelos")
        
        # Compara√ß√£o de m√©tricas
        metrics_df = pd.DataFrame({
            'M√©trica': ['Accuracy', 'Precision', 'Recall', 'F1-Score'],
            'Random Forest': [
                st.session_state['rf_metrics']['accuracy'],
                st.session_state['rf_metrics']['precision'],
                st.session_state['rf_metrics']['recall'],
                st.session_state['rf_metrics']['f1']
            ],
            'XGBoost': [
                st.session_state['xgb_metrics']['accuracy'],
                st.session_state['xgb_metrics']['precision'],
                st.session_state['xgb_metrics']['recall'],
                st.session_state['xgb_metrics']['f1']
            ]
        })
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            fig = go.Figure()
            fig.add_trace(go.Bar(
                name='Random Forest',
                x=metrics_df['M√©trica'],
                y=metrics_df['Random Forest'],
                marker_color='#667eea'
            ))
            fig.add_trace(go.Bar(
                name='XGBoost',
                x=metrics_df['M√©trica'],
                y=metrics_df['XGBoost'],
                marker_color='#764ba2'
            ))
            fig.update_layout(
                title='Compara√ß√£o de M√©tricas dos Modelos',
                barmode='group',
                yaxis_title='Score',
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("##### Tabela de M√©tricas")
            st.dataframe(
                metrics_df.style.format({
                    'Random Forest': '{:.4f}',
                    'XGBoost': '{:.4f}'
                }).highlight_max(axis=1, color='lightgreen', subset=['Random Forest', 'XGBoost']),
                use_container_width=True
            )
            
            # Melhor modelo
            rf_mean = metrics_df['Random Forest'].mean()
            xgb_mean = metrics_df['XGBoost'].mean()
            
            if rf_mean > xgb_mean:
                st.markdown("""
                <div class="custom-success">
                    <strong>üèÜ Melhor Modelo: Random Forest</strong><br>
                    Score m√©dio: {:.4f}
                </div>
                """.format(rf_mean), unsafe_allow_html=True)
                best_model = st.session_state['rf_model']
                st.session_state['best_model_name'] = 'Random Forest'
            else:
                st.markdown("""
                <div class="custom-success">
                    <strong>üèÜ Melhor Modelo: XGBoost</strong><br>
                    Score m√©dio: {:.4f}
                </div>
                """.format(xgb_mean), unsafe_allow_html=True)
                best_model = st.session_state['xgb_model']
                st.session_state['best_model_name'] = 'XGBoost'
            
            st.session_state['best_model'] = best_model
        
        # Matriz de Confus√£o
        st.markdown("---")
        st.subheader("üìâ Matrizes de Confus√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("##### Random Forest")
            cm_rf = confusion_matrix(st.session_state['y_test'], st.session_state['rf_pred'])
            
            # Limitar a 10x10 para visualiza√ß√£o
            if cm_rf.shape[0] > 10:
                top_classes = pd.Series(st.session_state['y_test']).value_counts().head(10).index
                mask = np.isin(st.session_state['y_test'], top_classes) & np.isin(st.session_state['rf_pred'], top_classes)
                cm_rf_display = confusion_matrix(
                    st.session_state['y_test'][mask], 
                    st.session_state['rf_pred'][mask]
                )
            else:
                cm_rf_display = cm_rf
            
            fig = px.imshow(
                cm_rf_display,
                text_auto=True,
                aspect='auto',
                color_continuous_scale='Blues',
                title='Top 10 Classes'
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("##### XGBoost")
            cm_xgb = confusion_matrix(st.session_state['y_test'], st.session_state['xgb_pred'])
            
            # Limitar a 10x10 para visualiza√ß√£o
            if cm_xgb.shape[0] > 10:
                mask = np.isin(st.session_state['y_test'], top_classes) & np.isin(st.session_state['xgb_pred'], top_classes)
                cm_xgb_display = confusion_matrix(
                    st.session_state['y_test'][mask], 
                    st.session_state['xgb_pred'][mask]
                )
            else:
                cm_xgb_display = cm_xgb
            
            fig = px.imshow(
                cm_xgb_display,
                text_auto=True,
                aspect='auto',
                color_continuous_scale='Purples',
                title='Top 10 Classes'
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        # Sistema de Recomenda√ß√£o
        st.markdown("---")
        st.subheader("üéØ Fazer Recomenda√ß√£o")
        
        customers_unique = st.session_state['df_ml']['customer_unique_id'].unique()
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            selected_customer = st.selectbox(
                "Selecione o ID do Cliente",
                customers_unique,
                help="Escolha um cliente para receber recomenda√ß√µes personalizadas"
            )
        
        with col2:
            num_recommendations = st.slider("N√∫mero de recomenda√ß√µes", 3, 10, 5)
        
        if st.button("üîÆ Gerar Recomenda√ß√µes", type="primary", use_container_width=True):
            df_ml = st.session_state['df_ml']
            best_model = st.session_state['best_model']
            
            # Obter hist√≥rico do cliente
            customer_history = df_ml[df_ml['customer_unique_id'] == selected_customer]
            
            if len(customer_history) > 0:
                customer_code = customer_history['customer_code'].iloc[0]
                
                # Prever probabilidades para todas as categorias
                if hasattr(best_model, 'predict_proba'):
                    probas = best_model.predict_proba([[customer_code]])[0]
                    top_indices = np.argsort(probas)[::-1][:num_recommendations]
                    
                    # Mapear de volta para nomes de categorias
                    category_mapping = df_ml[['category_code', 'product_category_name']].drop_duplicates()
                    category_mapping = category_mapping.set_index('category_code')['product_category_name'].to_dict()
                    
                    recommendations = []
                    for idx in top_indices:
                        if idx in category_mapping:
                            cat_name = category_mapping[idx]
                            recommendations.append({
                                'Categoria': cat_name,
                                'Confian√ßa (%)': f"{probas[idx] * 100:.2f}%",
                                'Score': probas[idx]
                            })
                    
                    if recommendations:
                        rec_df = pd.DataFrame(recommendations)
                        
                        st.markdown("##### üéÅ Produtos Recomendados")
                        
                        # Visualiza√ß√£o em cards
                        for i, rec in enumerate(recommendations, 1):
                            confidence = rec['Score'] * 100
                            color = '#4caf50' if confidence > 50 else '#ff9800' if confidence > 30 else '#f44336'
                            
                            st.markdown(f"""
                            <div style='padding: 1rem; background: linear-gradient(135deg, {color}22 0%, {color}11 100%); 
                                        border-left: 4px solid {color}; border-radius: 8px; margin-bottom: 0.5rem;'>
                                <strong>#{i} - {rec['Categoria']}</strong><br>
                                <span style='font-size: 1.2rem; font-weight: bold; color: {color};'>
                                    {rec['Confian√ßa (%)']}
                                </span>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # Gr√°fico de barras
                        fig = px.bar(
                            rec_df,
                            x='Score',
                            y='Categoria',
                            orientation='h',
                            title='Visualiza√ß√£o das Recomenda√ß√µes',
                            color='Score',
                            color_continuous_scale='Viridis'
                        )
                        fig.update_layout(showlegend=False, height=300)
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Hist√≥rico do cliente
                        st.markdown("##### üìú Hist√≥rico de Compras do Cliente")
                        
                        hist_categories = customer_history['product_category_name'].value_counts().reset_index()
                        hist_categories.columns = ['Categoria', 'Quantidade']
                        hist_categories = hist_categories.head(10)
                        
                        col1, col2 = st.columns([1, 2])
                        
                        with col1:
                            safe_show_df(hist_categories, height=300)
                        
                        with col2:
                            fig = px.pie(
                                hist_categories,
                                values='Quantidade',
                                names='Categoria',
                                title='Distribui√ß√£o de Compras Anteriores',
                                hole=0.4
                            )
                            st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel gerar recomenda√ß√µes para este cliente.")
                else:
                    st.error("‚ùå Modelo n√£o suporta predi√ß√£o de probabilidades.")
            else:
                st.warning("‚ö†Ô∏è Cliente n√£o encontrado no hist√≥rico.")

# ============================================
# SE√á√ÉO: DOCUMENTA√á√ÉO
# ============================================

elif escolha == "üìö Documenta√ß√£o":
    st.header("üìö Documenta√ß√£o do Sistema")
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìñ Vis√£o Geral",
        "üóÇÔ∏è Estrutura dos Dados",
        "ü§ñ Modelos de ML",
        "üí° Como Usar"
    ])
    
    with tab1:
        st.markdown("""
        ### üéØ Sobre o Sistema
        
        Este sistema foi desenvolvido para an√°lise completa de dados de e-commerce brasileiro, 
        utilizando o dataset p√∫blico da **Olist** dispon√≠vel no Kaggle.
        
        #### üåü Principais Funcionalidades
        
        1. **üìä Vis√£o Geral**
           - M√©tricas gerais do dataset
           - An√°lise temporal de pedidos
           - Informa√ß√µes consolidadas
        
        2. **üîç An√°lise Explorat√≥ria**
           - Visualiza√ß√£o detalhada de cada dataset
           - Estat√≠sticas descritivas
           - An√°lise de valores nulos
           - Gr√°ficos interativos
        
        3. **üîó An√°lise Relacional**
           - An√°lise geogr√°fica de pedidos
           - Distribui√ß√£o de produtos por categoria
           - An√°lise de m√©todos de pagamento
           - An√°lise de avalia√ß√µes dos clientes
        
        4. **ü§ñ Sistema de Recomenda√ß√£o**
           - Treinamento de modelos de Machine Learning
           - Compara√ß√£o entre Random Forest e XGBoost
           - Recomenda√ß√µes personalizadas por cliente
           - An√°lise de confian√ßa das recomenda√ß√µes
        
        #### üõ†Ô∏è Tecnologias Utilizadas
        
        - **Streamlit**: Interface web interativa
        - **Pandas**: Manipula√ß√£o de dados
        - **Plotly**: Visualiza√ß√µes interativas
        - **Scikit-learn**: Modelos de Machine Learning
        - **XGBoost**: Gradient Boosting otimizado
        - **KaggleHub**: Download de datasets
        """)
    
    with tab2:
        st.markdown("""
        ### üóÇÔ∏è Estrutura dos Datasets
        
        O sistema trabalha com 9 datasets principais:
        
        #### üì¶ Orders (Pedidos)
        - **order_id**: ID √∫nico do pedido
        - **customer_id**: ID do cliente
        - **order_status**: Status do pedido
        - **order_purchase_timestamp**: Data/hora da compra
        - **order_delivered_timestamp**: Data/hora da entrega
        
        #### üë• Customers (Clientes)
        - **customer_id**: ID √∫nico do cliente
        - **customer_unique_id**: ID permanente do cliente
        - **customer_zip_code**: CEP do cliente
        - **customer_city**: Cidade
        - **customer_state**: Estado
        
        #### üì¶ Order Items (Itens do Pedido)
        - **order_id**: ID do pedido
        - **order_item_id**: N√∫mero do item
        - **product_id**: ID do produto
        - **seller_id**: ID do vendedor
        - **price**: Pre√ßo do item
        - **freight_value**: Valor do frete
        
        #### üè∑Ô∏è Products (Produtos)
        - **product_id**: ID √∫nico do produto
        - **product_category_name**: Nome da categoria
        - **product_weight_g**: Peso em gramas
        - **product_length_cm**: Comprimento
        - **product_height_cm**: Altura
        - **product_width_cm**: Largura
        
        #### üí≥ Payments (Pagamentos)
        - **order_id**: ID do pedido
        - **payment_sequential**: N√∫mero sequencial
        - **payment_type**: Tipo de pagamento
        - **payment_installments**: N√∫mero de parcelas
        - **payment_value**: Valor do pagamento
        
        #### ‚≠ê Reviews (Avalia√ß√µes)
        - **review_id**: ID da avalia√ß√£o
        - **order_id**: ID do pedido
        - **review_score**: Nota (1-5)
        - **review_comment_title**: T√≠tulo do coment√°rio
        - **review_comment_message**: Coment√°rio
        
        #### üè™ Sellers (Vendedores)
        - **seller_id**: ID √∫nico do vendedor
        - **seller_zip_code**: CEP
        - **seller_city**: Cidade
        - **seller_state**: Estado
        
        #### üó∫Ô∏è Geolocation (Geolocaliza√ß√£o)
        - **geolocation_zip_code**: CEP
        - **geolocation_lat**: Latitude
        - **geolocation_lng**: Longitude
        - **geolocation_city**: Cidade
        - **geolocation_state**: Estado
        
        #### üåê Translation (Tradu√ß√£o)
        - **product_category_name**: Nome em portugu√™s
        - **product_category_name_english**: Nome em ingl√™s
        """)
    
    with tab3:
        st.markdown("""
        ### ü§ñ Modelos de Machine Learning
        
        O sistema utiliza dois algoritmos de classifica√ß√£o para o sistema de recomenda√ß√£o:
        
        #### üå≤ Random Forest Classifier
        
        **Caracter√≠sticas:**
        - Ensemble de m√∫ltiplas √°rvores de decis√£o
        - Reduz overfitting atrav√©s de bootstrap aggregating
        - Robusto a outliers e dados n√£o balanceados
        - Fornece import√¢ncia das features
        
        **Par√¢metros Configur√°veis:**
        - `n_estimators`: N√∫mero de √°rvores (50-200)
        - `random_state`: Seed para reprodutibilidade
        
        **Vantagens:**
        - Alta acur√°cia
        - Funciona bem com dados categ√≥ricos
        - Menos propenso a overfitting
        
        #### üöÄ XGBoost Classifier
        
        **Caracter√≠sticas:**
        - Gradient Boosting otimizado
        - Treinamento mais r√°pido que Random Forest
        - Regulariza√ß√£o integrada (L1 e L2)
        - Excelente performance em competi√ß√µes
        
        **Par√¢metros Configur√°veis:**
        - `n_estimators`: N√∫mero de estimadores (50-200)
        - `eval_metric`: M√©trica de avalia√ß√£o (mlogloss)
        - `random_state`: Seed para reprodutibilidade
        
        **Vantagens:**
        - Performance superior em muitos casos
        - Treinamento eficiente
        - Lida bem com dados desbalanceados
        
        #### üìä M√©tricas de Avalia√ß√£o
        
        O sistema avalia os modelos usando 4 m√©tricas principais:
        
        1. **Accuracy (Acur√°cia)**
           - Propor√ß√£o de predi√ß√µes corretas
           - F√≥rmula: (VP + VN) / Total
        
        2. **Precision (Precis√£o)**
           - Propor√ß√£o de predi√ß√µes positivas corretas
           - F√≥rmula: VP / (VP + FP)
        
        3. **Recall (Revoca√ß√£o)**
           - Propor√ß√£o de positivos reais identificados
           - F√≥rmula: VP / (VP + FN)
        
        4. **F1-Score**
           - M√©dia harm√¥nica entre Precision e Recall
           - F√≥rmula: 2 * (Precision * Recall) / (Precision + Recall)
        
        #### üéØ Sistema de Recomenda√ß√£o
        
        O sistema funciona em 3 etapas:
        
        1. **Prepara√ß√£o dos Dados**
           - Codifica√ß√£o de clientes e categorias
           - Cria√ß√£o de features num√©ricas
        
        2. **Treinamento**
           - Divis√£o treino/teste configur√°vel
           - Treinamento paralelo de ambos os modelos
        
        3. **Recomenda√ß√£o**
           - Predi√ß√£o de probabilidades por categoria
           - Ranking das top N categorias
           - Visualiza√ß√£o de confian√ßa
        """)
    
    with tab4:
        st.markdown("""
        ### üí° Como Usar o Sistema
        
        #### 1Ô∏è‚É£ Navega√ß√£o B√°sica
        
        Use o menu lateral para alternar entre as se√ß√µes:
        - **üìä Vis√£o Geral**: M√©tricas e informa√ß√µes gerais
        - **üîç An√°lise Explorat√≥ria**: Explore cada dataset
        - **üîó An√°lise Relacional**: Rela√ß√µes entre dados
        - **ü§ñ Sistema de Recomenda√ß√£o**: Treine modelos e fa√ßa recomenda√ß√µes
        - **üìö Documenta√ß√£o**: Esta p√°gina
        
        #### 2Ô∏è‚É£ An√°lise Explorat√≥ria
        
        1. Selecione um dataset no dropdown
        2. Use as tabs para alternar entre:
           - **Dados**: Visualiza√ß√£o tabular
           - **Estat√≠sticas**: Resumo estat√≠stico
           - **Visualiza√ß√µes**: Gr√°ficos interativos
        3. Configure o n√∫mero de linhas ou colunas a visualizar
        
        #### 3Ô∏è‚É£ An√°lise Relacional
        
        Explore 4 √°reas principais:
        - **Geogr√°fica**: Mapa de pedidos por estado
        - **Produtos**: Top categorias e an√°lise de pre√ßos
        - **Pagamentos**: M√©todos e distribui√ß√£o de parcelas
        - **Avalia√ß√µes**: Notas e satisfa√ß√£o dos clientes
        
        #### 4Ô∏è‚É£ Sistema de Recomenda√ß√£o
        
        **Passo a Passo:**
        
        1. **Configure os Par√¢metros**
           - Tamanho do conjunto de teste (10-40%)
           - N√∫mero de √°rvores para Random Forest (50-200)
           - N√∫mero de estimadores para XGBoost (50-200)
           - Random state para reprodutibilidade
        
        2. **Treine os Modelos**
           - Clique em "üöÄ Treinar Modelos"
           - Aguarde o treinamento (pode levar alguns minutos)
           - Observe as m√©tricas de performance
        
        3. **Analise os Resultados**
           - Compare as m√©tricas entre os modelos
           - Visualize as matrizes de confus√£o
           - Identifique o melhor modelo
        
        4. **Gere Recomenda√ß√µes**
           - Selecione um ID de cliente
           - Escolha quantas recomenda√ß√µes deseja (3-10)
           - Clique em "üîÆ Gerar Recomenda√ß√µes"
           - Analise as categorias sugeridas e o hist√≥rico do cliente
        
        #### üí° Dicas de Uso
        
        - **Performance**: Use cache do navegador para acelerar carregamento
        - **Visualiza√ß√µes**: Passe o mouse sobre os gr√°ficos para ver detalhes
        - **Exporta√ß√£o**: Use Ctrl+P ou Cmd+P para exportar visualiza√ß√µes
        - **Compara√ß√£o**: Treine m√∫ltiplas vezes com diferentes par√¢metros
        - **Interpreta√ß√£o**: Foque em m√∫ltiplas m√©tricas, n√£o apenas accuracy
        
        #### ‚ö†Ô∏è Limita√ß√µes
        
        - Dataset limitado a dados hist√≥ricos da Olist
        - Recomenda√ß√µes baseadas apenas em categorias
        - Modelos simples sem fine-tuning avan√ßado
        - Dados de cache expiram ap√≥s 1 hora
        
        #### üêõ Solu√ß√£o de Problemas
        
        **Erro ao carregar dados:**
        - Verifique sua conex√£o com a internet
        - Aguarde alguns minutos e tente novamente
        - Limpe o cache do navegador
        
        **Modelos n√£o treinam:**
        - Reduza o n√∫mero de estimadores
        - Aumente o tamanho do conjunto de teste
        - Verifique se h√° mem√≥ria suficiente
        
        **Recomenda√ß√µes inconsistentes:**
        - Cliente pode ter hist√≥rico limitado
        - Tente outro cliente com mais compras
        - Verifique as m√©tricas de confian√ßa
        """)

# ============================================
# FOOTER
# ============================================

st.markdown("""
<div class="footer">
    <p style='margin: 0; font-size: 1.1rem;'>
        Desenvolvido com ‚ù§Ô∏è por <a href="https://github.com/bcmaymonegalvao" target="_blank">Bruno Galv√£o</a>
    </p>
    <p style='margin: 0.5rem 0 0 0; opacity: 0.9;'>
        üìÖ 2025 | Powered by Streamlit, Plotly & Scikit-learn
    </p>
    <p style='margin: 0.25rem 0 0 0; font-size: 0.9rem; opacity: 0.8;'>
        Dataset: Olist Brazilian E-Commerce | ¬© Todos os direitos reservados
    </p>
</div>
""", unsafe_allow_html=True)
